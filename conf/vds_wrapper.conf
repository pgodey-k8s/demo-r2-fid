#********************************************************************
# Wrapper Properties
#********************************************************************
wrapper.java.command=../../jdk/bin/java
# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp

# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
wrapper.java.classpath.1=../lib/wrapper.jar
wrapper.java.classpath.2=../../lib/*.jar
#wrapper.java.classpath.3=../data/custom/lib/*.jar

# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=../lib

# Java Additional Parameters
#wrapper.java.additional.1=-Drli.home="<path_to_rlihome>"

# Initial Java Heap Size (in MB)
wrapper.java.initmemory=8

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=512

# Application parameters.  Add parameters as needed starting from 1
# WILL BE REWRITTEN TO USE VdsServerWrapper
wrapper.app.parameter.1=com.rli.slapd.server.VDSServer

# The wrapper.filter pair of properties make it possible to filter the output of a JVM 
# and then perform some action whenever a specific trigger string is found.
wrapper.filter.trigger.1=java.lang.OutOfMemoryError
wrapper.filter.action.1=RESTART

# To configure the Wrapper to restart the JVM for all exit codes except the exit code 0
wrapper.on_exit.default=RESTART
wrapper.on_exit.0=SHUTDOWN

# Maximum number of times that the Wrapper will attempt to restart the JVM if each attempted invocation
# exits abnormally or is restarted shortly after having being launched.
# Must be at least 1. Defaults to 5 invocations.
wrapper.max_failed_invocations=5

# Controls the number of seconds to pause between a JVM exiting for any reason, and a new JVM being launched.
# Defaults to 5 seconds.
wrapper.restart.delay=5

#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Format of output for the console.  
wrapper.console.format=PM

# Log Level for console output.
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=../logs/vds_server_wrapper.log

# Format of output for the log file.  
wrapper.logfile.format=LPTM

# Log Level for log file output.
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=10m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=25

# Log Level for sys/event log output.
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper Windows Properties
#********************************************************************
# Title to use when running as a console
wrapper.console.title=RadiantOne VDS (vds_server)

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.ntservice.name=vds_server

# Display name of the service
wrapper.ntservice.displayname=RadiantOne VDS (vds_server)

# Description of the service
wrapper.ntservice.description=RadiantOne Virtual Directory Server (vds_server) as a service.

# Service dependencies.  Add dependencies as needed starting from 1
#wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

# File to write the Java process ID to.
wrapper.java.pidfile=vds_server.pid

# Number of seconds for the interval between Wrapper ping requests to the JVM.
# The default value is 5 seconds, with valid values in the range of 1-3600 seconds.
wrapper.ping.interval=30

# Number of seconds to allow between the Wrapper pinging the JVM and the response from the JVM.
# The default value is 30 seconds.
wrapper.ping.timeout=150